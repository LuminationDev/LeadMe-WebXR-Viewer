var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// src/LeadMeLabsConnection.ts
var net = __require("net");
var LeadMeLabsConnection = class {
  logCallback = () => {
  };
  pauseCallback = () => {
  };
  resumeCallback = () => {
  };
  shutdownCallback = () => {
  };
  detailsCallback = () => {
  };
  actionCallback = (message) => {
  };
  server;
  client;
  connect() {
    var PIPE_NAME = "leadme_api";
    var PIPE_PATH = "\\\\.\\pipe\\" + PIPE_NAME;
    this.server = net.createServer((stream) => {
      stream.on("data", (c) => {
        this.handleMessage(c.toString().replace(/\u0000/g, ""));
      });
    }).on("error", () => {
      this.server = null;
    });
    if (this.server) {
      this.server.listen(PIPE_PATH);
    }
  }
  disconnect() {
    this.server.close();
  }
  send(message) {
    var PIPE_NAME = "leadme_parent_api";
    var PIPE_PATH = "\\\\.\\pipe\\" + PIPE_NAME;
    if (!this.client) {
      this.client = net.connect(PIPE_PATH).on("error", () => {
        this.client = null;
      });
    }
    if (this.client) {
      this.client.write(Buffer.from(message, "utf16le"));
    }
  }
  setLogCallback(callback) {
    this.logCallback = callback;
  }
  setPauseCallback(callback) {
    this.pauseCallback = callback;
  }
  setResumeCallback(callback) {
    this.resumeCallback = callback;
  }
  setShutdownCallback(callback) {
    this.shutdownCallback = callback;
  }
  setDetailsCallback(callback) {
    this.detailsCallback = callback;
  }
  setActionCallback(callback) {
    this.actionCallback = callback;
  }
  handleMessage(message) {
    switch (message) {
      case "log":
        this.logCallback();
        break;
      case "pause":
        this.pauseCallback();
        break;
      case "resume":
        this.resumeCallback();
        break;
      case "shutdown":
        this.shutdownCallback();
        break;
      case "details":
        this.detailsCallback();
        break;
      case "action":
      default:
        this.actionCallback(message);
        break;
    }
  }
};
var LeadMeLabsConnection_default = LeadMeLabsConnection;
export {
  LeadMeLabsConnection_default as LeadMeLabsConnection
};
//# sourceMappingURL=index.mjs.map